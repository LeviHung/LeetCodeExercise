package twopointers;

import java.util.Arrays;

public class RemovePalindromicSubsequences
{
  public static int removePalindromeSub(String s) {
    if (s.length() == 0) {
        return 0;
    } else if (isPalindrome(s) == true) {
        return 1;
    } else {
        return 2;
    }
    /*
    int start = 0;
    boolean isPal = false;
    int remind = s.length();
    int res = 0;
    while(remind > 0) {
        System.out.println("remind = " + remind);
        System.out.println("start = " + start);
        for (int i = s.length(); i >= start; i--) {
            isPal = isPalindrome(s.substring(start, i)); 
            if (isPal == true) {
                res++;
                remind = remind - (i - start);
                start = i;
                isPal = false;
                break;
            }
        }
    }
    return res;
    */
    }

    public static boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            char leftChar = s.charAt(left);
            char rightChar = s.charAt(right);

            if (leftChar != rightChar) {
                return false;
            }
            left++;
            right--;
        }
        return true;
  }

  public static void readme()
  {
    String str = "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\n\n";
    
    str += "Return the minimum number of steps to make the given string empty.\n\n";
    
    str += " A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\n\n";

    str += "A string is called palindrome if is one that reads the same backward as well as forward.\n";

    System.out.println(str);
  }

  public static void main() 
  {
    RemovePalindromicSubsequences.readme();
    String s;
    // Input: s = "ababa"
    // Output: 1
    s = "ababa";
    System.out.println("removePalindromeSub(" + s + ") = " + 
                       removePalindromeSub(s));

    // Input: s = "abb"
    // Output: 2
    s = "abb";
    System.out.println("removePalindromeSub(" + s + ") = " + 
                       removePalindromeSub(s));
    // Input: s = "baabb"
    // Output: 2
    s = "baabb";
    System.out.println("removePalindromeSub(" + s + ") = " + 
                       removePalindromeSub(s));

  }
}